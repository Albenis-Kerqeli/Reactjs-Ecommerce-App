{"version":3,"sources":["helpers/Notification.js","styles/Cart.module.css","styles/FlexCart.module.css","styles/FlexColumn.module.css","UI/FlexCart.js","UI/FlexColumn.js","components/Cart.js"],"names":["notification","value","toast","success","title","module","exports","FlexCart","memo","props","count","className","styling","CartInfo","src","image","alt","children","CartInfoQt","Button","margin","onClick","increment","bgColor","textColor","padding","aria-label","decrement","price","FlexColumn","FlexColumnInfo","FlexInfo","Cart","useContext","StoreContext","cartctx","filtered","total","values","order","useState","setTotalQ","setValue","setOrders","carts","setCarts","filteredCart","TotalCartPrice","history","useHistory","HandleDelete","id","removeItem","filter","todo","useEffect","getTotal","localStorage","getItem","setItem","map","cart","e","incrementCount","length","push","decrementCount","console","log","CartRow","ActionButtons","radius","preventDefault"],"mappings":"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","file":"static/js/Cart.8f571717.chunk.js","sourcesContent":["import { memo } from \"react\";\r\nimport {toast} from \"react-toastify\";\r\nexport const notification =(value) => {\r\n    toast.success(`${value.title} Product removed from the cart`)\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cart\":\"Cart_Cart__1gZf_\",\"CartRow\":\"Cart_CartRow__R817H\",\"deleteIcon\":\"Cart_deleteIcon__2fxM1\",\"ActionButtons\":\"Cart_ActionButtons__ppFpP\",\"CleanCartBtn\":\"Cart_CleanCartBtn__c9D7J\",\"CheckoutCartBtn\":\"Cart_CheckoutCartBtn__34Gh2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FlexCart\":\"FlexCart_FlexCart__2mipA\",\"CartInfo\":\"FlexCart_CartInfo__1J0j1\",\"CartInfoQt\":\"FlexCart_CartInfoQt__2Y1Do\",\"icon\":\"FlexCart_icon__1ylSy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FlexColumn\":\"FlexColumn_FlexColumn__23Gye\",\"FlexColumnInfo\":\"FlexColumn_FlexColumnInfo__3BNru\",\"FlexInfo\":\"FlexColumn_FlexInfo__2InGK\"};","import styling from \"../styles/FlexCart.module.css\";\r\nimport  { memo} from \"react\";\r\nimport { StoreContext } from \"../Context/StoreContext\";\r\nimport {AiOutlinePlus  , AiOutlineMinus} from \"react-icons/ai\";\r\n\r\nimport Button from './Button'\r\n\r\nconst FlexCart = memo((props) => {\r\n  const {count}  = props;\r\n  return (\r\n    <div className={styling.FlexCart}>\r\n      <div className={styling.CartInfo}>\r\n        <img src={props.image} alt=\"product\" />\r\n      </div>\r\n      <div className={styling.CartInfo}>\r\n      <h1>{props.title}</h1>\r\n<div>{props.children}</div>\r\n      </div>\r\n\r\n      <div className={styling.CartInfoQt}>\r\n        <Button margin=\"5px\" onClick={props.increment} bgColor=\"var(--lightblue)\" textColor=\"#000000\" padding=\"10px\" aria-label=\"increase\"><AiOutlinePlus /></Button>\r\n        <h1>{count}</h1>\r\n        <Button  margin=\"5px\" onClick={props.decrement} bgColor=\"var(--lightblue)\" textColor=\"#000000\" padding=\"10px\" aria-label=\"decrease\"><AiOutlineMinus /></Button>\r\n      </div>\r\n      <div className={styling.CartInfo}>\r\n        <h1>â‚¬{props.price}</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default FlexCart;\r\n","import styling from \"../styles/FlexColumn.module.css\";\r\nimport {memo} from 'react';\r\nconst FlexColumn = memo((props) => {\r\n  return (\r\n  <div className={styling.FlexColumn}>\r\n      <div className={styling.FlexColumnInfo}>\r\n<div className={styling.FlexInfo}>\r\n<h1>Product Image</h1>\r\n      </div>\r\n      <div className={styling.FlexInfo}>\r\n<h1>Product Name</h1>\r\n      </div>\r\n      <div className={styling.FlexInfo}>\r\n<h1>Product Qty</h1>\r\n      </div>\r\n\r\n      <div className={styling.FlexInfo}>\r\n<h1>Product Price</h1>\r\n      </div>\r\n      </div>\r\n  {props.children}\r\n  \r\n  </div>\r\n  )});\r\n\r\nexport default FlexColumn;\r\n","import  { useEffect ,lazy, useContext,useState } from \"react\";\r\nimport { StoreContext } from \"../Context/StoreContext\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { BsTrash } from \"react-icons/bs\";\r\nimport styling from \"../styles/Cart.module.css\";\r\nimport Button from \"../UI/Button\";\r\nimport FlexCart from \"../UI/FlexCart.js\";\r\nimport FlexColumn from \"../UI/FlexColumn.js\";\r\nimport {notification} from \"../helpers/Notification\";\r\nconst Cart = () => {\r\n    const { cartctx, filtered, total, values, order } = useContext(\r\n    StoreContext\r\n  );\r\n  const [totalQ,setTotalQ] = useState();\r\n  let [value, setValue] = values;\r\n  let [orders, setOrders] = order;\r\n  let [carts, setCarts] = cartctx;\r\n  const { filteredCart } = filtered;\r\n  let { TotalCartPrice } = total;\r\n  const history = useHistory();\r\n\r\n  const HandleDelete = (id) => {\r\n    const removeItem = filteredCart.filter((todo) => todo.id !== id);\r\n    setCarts(removeItem);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getTotal = localStorage.getItem(\"TotalPrice\");\r\n    if (getTotal) {\r\n      setTotalQ(getTotal);\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"TotalPrice\", TotalCartPrice);\r\n  }, []);\r\n\r\nconst AddToOrder = (e) => {\r\n  e.preventDefault();\r\n  setOrders([\r\n    ...filteredCart,\r\n\r\n    {\r\n      id: filteredCart.id,\r\n      title: filteredCart.title,\r\n      image: filteredCart.image,\r\n      price: filteredCart.price,\r\n      count: filteredCart.count\r\n    }\r\n  ]);\r\n  \r\n  history.push(\"/checkout\");\r\n}\r\n\r\nconst incrementCount = (cart) => {\r\n  setValue(++cart.count);\r\n}\r\nconst decrementCount =  (cart) => {\r\n  cart.count > 0 ? setValue(--cart.count):'';\r\n  cart.count == 0 ? HandleDelete(cart.id) : \"0\";\r\n  carts.length === 1 ? history.push('/') : '';     \r\n}\r\n\r\n  return (\r\n    carts != \"\" && (\r\n      <div className={styling.Cart}>\r\n        <FlexColumn>\r\n          {filteredCart.map((cart) => {\r\n\r\n            return (\r\n              <FlexCart\r\n                key={cart.id}\r\n                image={cart.image}\r\n                title={cart.title}\r\n                count={cart.count}\r\n                increment={(e) => incrementCount(cart)}\r\n                decrement={(e) => decrementCount(cart)}\r\n                price={cart.price * cart.count}\r\n              >\r\n                <Button aria-label=\"delete\"\r\n                bgColor=\"var(--lightblack)\"\r\n                margin=\"0 10px\"\r\n                  padding=\"10px\"\r\n                  textColor=\"white\"\r\n\r\n                \r\n                  onClick={(e) => {\r\n                    \r\n                    HandleDelete(cart.id);\r\n                    notification(cart);\r\n                    if(filteredCart.length <= 1) {\r\n                      history.push('/');\r\n                      \r\n                    }\r\n                    else {\r\n                      console.log('Cart updated')\r\n                    }\r\n                  }}\r\n                >\r\n                  <BsTrash />\r\n                </Button>\r\n              </FlexCart>\r\n            );\r\n          })}\r\n        </FlexColumn>\r\n        <div className={styling.CartRow}>\r\n        <div className={styling.ActionButtons}>\r\n           \r\n           <Button\r\n             padding=\"10px 20px\"\r\n             bgColor=\"var(--darkblack)\"\r\n             textColor=\"white\"\r\n             radius=\"10px\"\r\n             onClick={(e) => {\r\n               setCarts([]);\r\n               history.push(\"/\");\r\n             }}\r\n           >\r\n             Clear the Cart\r\n           </Button>\r\n       </div>\r\n       <div className={styling.ActionButtons}>\r\n              <h1>Total Price :{TotalCartPrice}â‚¬</h1>\r\n              <Button\r\n                padding=\"10px 20px\"\r\n                bgColor=\"var(--lightorange)\"\r\n                textColor=\"var(--white)\"\r\n                radius=\"10px\"\r\n                onClick={AddToOrder}\r\n              >\r\n                Checkout\r\n              </Button>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n"],"sourceRoot":""}